what is jobs ? request for nodes,time when to run etc. an user request for a job.   
Array job : special type of jobs where it is going to run multiple sub-jobs as a part of this job.

all state transitions on that queue only. default queue if queye not provided.
queues based on priorities as well. job submit->goes to queue. 

client communicates with the server

PBS server: serves request fro the client (interface to the client / user/ jobs)
Server will assign the job to that queue.
Server and scheduler keep
scheduler depending on the amount of resources and priority, will schedule the jobs.

MoM will see what needs to be done , what needs to be run, will do the process management for this job.
MoM will monitor those job processes with the kernel
MoM will tell the server that so and so is the process id.

Server will make a note of that, will change the state of the job 
so next time an user tells something, it will show that the job is running.

Server will keep updating the information like how much time for it has run, what is the state of the job right now, etc.
Mom might send this information every 10 seconds or so, the server will keep updating its structures to keep a track of the same.

periodically the scheduler will also ask for resources, which process to run etc.

mom going to understand the resources etc.

server and mom on other nodes generally.

mom will run on the execution nodes, server on the serving nodes.


job 4 nodes, scheduler find 4 nodes.
one node is mother node.other sister mode. server going to communicate with other node.
communication may break between some nodes.



cat /etc/*release*   :   will show the current OS.
two ways to distribute softwares 
RPM : redhat packahge manager. 
DBN : DBN package manager. dpkg

build RPM and convert it to dpkg.



cd PBS_pro_2022 : various RPM files depening on comunication, client etc.
rmp -i pbspro-server-2022.0.0

/etc/init.d/pbs start : shell script to start.

/etc/init.d/pbs status : will give the status.

a conf file, which things are supposed to run. vi /etc/pbs.conf
since all are 1, so all will run.



COMMANDS : 
rpm -i pbspro-server-2022.0.0.20220311133859-0.el7.x86_64.rpm
# /etc/init.d/pbs start
# /etc/init.d/pbs status
# vi /etc/pbs.conf


print server : what all queues, what configurations we have done till now

print scheduler : what the scheduler configuration



queue type : execution, jobs on this queue should be executed, goes to scheduler
enabled : user can submit jobs to this queue.
started : jobs scheduled on this can be set to run.

scheduler_iteration = 600 seconds. (to scheduler period)


what all resources :
pbsnodes -av : which nodes are there/configured on this system
 		state will tell which node is free.

qsub -- /bin/sleep 100 : its going to sleep. sleep job.  /bin/sleep is the executable.  //no arguments provided, it means it will take the number of cpu to be one by default.


root cannnot submit jobs.

qstat -s : about the running processes.

/etc/init.d/pbs restart : restart

scheduling cucle is triggered when aprocess is finished

qstat -f : more info on jobs.


tracejob id : will give u the state of job, how time it has run etc.


for multinode job, one of them the leader and other followers. leader is called mother superior other are called sister mother.
all the nodes are connected to server. for a job, one of the job is mother superior and other children.

server will take info from mother node, mother will take info from sister nodes.

Multiple jobs at a node. but we can set this limit to only one.



cat /etc/pbs.conf
    logs will basically give you the flow. (like the sequence of events that happened.)
	PBS_EXEC and PBS_HOME : ls -l /opt/pbs/ : will give files related to the exec.
		PBS_HOME : some files of HOME.

		all the jobs will be stored on daemon.


		datastore: all jobs process related info.

	ls -l /var/spool/pbs/server_logs/20220
	...mom_logs... : related to mom,etc. what process there etc.
    look at logs to see what happened,where went wrong etc.


ps -elf | grep pbs : pbs related processes.




qsub -lselect=2:ncpus=2 .. /bin/sleep 1111   (2 cpus i got)  # 2chunks, each of 2 cpus

pbsnodes -av : the list of process running.

also, we can ask for resources memory wise also, like 1 GB for one chunk and 2 GB for another

for everynode , we create a resouce.
many resources an admin will create on their own.

Reservations :  Job will run whenever its time comes, or resources are available.
		User does not know when job is going to run.
		we resever particular amount of resources on nodes for particular amount of time
		reservation has separate queye.
		nothing will be scheduled on those reources when it is running, since it is reserved.
		
pbs_rsub -R 006 -E 0008 : reservation
pbs_rstat : log of this reservation.
qsub -q R4 -- /bin/sleep 111

pbs_rdel : delete reservation.







pmgs : 
qstat : look at job
qdel : delete job
pbs_rsub : 
pbs_rstat : status of reservation
pbs_rdel : delete reservation.




###################################################################################################################################################################################################


 PBS_SCF : stores the scp path, like where to copy and so on.
 PBS_HOME : config file 






submit a job in pbs : qsub to submit a job in pbs.

submit simple job : qsub -- /bin/sleep 10

        whole string is the jobid

status of job : qstat : list of all the jobs

qdel 2 : delete the job of job id 2

qstat : status of job

vi job.scr

qsub job.scr : submit job which is inside the job script job.scr

user submit a job to server, server returns the jobid to the user
scheduler will have info 

pbsnodes -av : listyou all the MOMS in the cluster.
	     
JOB Attributes : qstat -f job-id (if only one job then no need to mention the job-id)

qsub : no argument, it will take 1 cpu from 1 chunk.(1 node as well)

qstat -sw : along with running info show the resources cosuming as well.





qmgr : queue manager

used to set the attributes of nodes, server etc.

qmgr -c"action object attribute=value"

	action: set unset list print create

	object : server sched node hook

	sttributes: depends.


qmgr -c"set node xarm-01-s15 resources_available.ncpus=2"


now, it can run two jobs at a time !!!! (inside a single node itself !!)


submit job with 2 ncpus sleep job of 30 seconds
submit job with name

SPECIFYING WITH RESOURCES : 
submit job with 2 ncpus :
	#qsub --help (works like a man )
	qsub -l ncpus=2 -- /bin/sleep 30



PBS Only takes account of jobs which are in running or queded state


sudo qmgr -c"set server job_history_enabled=true" // by default config we wont be able to see f state.
//after this run qstat -x.

//JOB HISTORY DURATION : will say that for how long the history there in the qstat -x.


qstat -Bf :
	list the server attributes # please see above. job_history enabled is there as well. similary u can set others as well

qstat -x : will show the histroy jobs(which has finished)

########### job substates (from BOOK)

qstat -fx 23 : job attributes of the finished job with id 23 (-f stands for full info, x for history)




JOB ARRAY : (parent job and multiple subjobs)
qsub -J 1-4 -- bin/sleeep 100

(NOTE:  [] in job id, it means job array. can check this using the qstat command.)

state different for regular job

check other subjobs : qstat -swt (option t as well for subjobs)

qdel 23[] : delete the job which is an array

each subjob will behave like normal job

30[],30[1],30[2]  : first is parent,next are children

qstat -f 30[1] : info about the first subjob

state x in qstat : it has been deleted.



###################################################################################################################

PBS RESOURCES : 

things such as CPIs, memory,app licences etc. 
whether a machine is dedicated to a project or not.

two types of resurces: build in and custom resources.



custom resouces : resources that PBS defines for some system

scheduable resource : PBS will consider that while sheduling

server resource : availanle at server resource 

queue level resource : only that job resource.

each part of job at one node is called chunk.

qsub -l select=1:ncpus=2:mem=1gb -- /bin/sleep 100   //each one is a chunk, give me 1 node(chunk)

consumable and nonconsumable resources : one that is consumed as more jobs are scheduled is consumable, example ncpus

example of nonconsumable : walltime (it is the time for which a job runs)

Ststic resource comes under control of PBS, dynamic not under PBS

qsub -l select=5:ncpus=2:mem=1gb+5:ncpus=6:mem=4gb -- /bin/sleep 10000

job wide resours: applies to entire job.




#####################################################################################################################

ALWAYS recommended to run the job as user.

submit as a root : qmgr -c"s s acl_roots=root@*"

now we can submit job from the root.


INTERACTIVE Job : Get an terminal to interact.

qstat -sw : show status 'widely', -w will give more information.


subjobs: -t : qstat -swt

array job : qsub -J 51-54 -- bin/sleeep 100 : 3subjobs, indics will be 51 52 53

qsub -I : submit interactive job. (no limit for interactive job.)

exit : to exit from interactive job., that interactive job has completed. interactive jobs to see configuration etc. rarely used.





qmgr -c"l r color" : list resource color.

//create red color using the qmgr command.

qsub -lcolor=red -- /bin/sleep 10 : resource color =red.
//now even if we set it to blue, it will run. we need to let this know to scheduler as well.
cat /etc/pbs.conf : configuration files

mom_prev will have mom configuration files.

vi sched_config  : add the avaliable resource as color : red.
then pkill -HUP pbs_sched. (to reflect the changes.)



qsub -lselect=1:ncpus=4:color=red -- /bin/sleep 10  		//number of chunks/nodes we need for the job


qmgr -c"c n node_name"  : will add/create this node

MULTI NODE JOB :

qsub -lselect=2:ncpus=1 -- /bin/sleep 10

qmgr -c"set node node_name resourcesavailable.ncpus=1"

cluster is multiple MoMs.

in my cluster 2 availabke cpus are available. (total cpus in each node in pbsnodes av.)

Scheduling cycle trigger : saying to scheduler that like some changes and look into it.

*** Look into this : starting scheduling cycle(considered 28 but couldnt run and thus left) and ending scheduling . once we change the resources, the scheduling cycle is 
change the resouces: either wait for cycle for next cycle or wait for next cycle

NOTE  :   check for error and output file as well in the qstat thing.




tracejob job_id : info about the job.
L S M A  : l for scheduler, S for server, A for accounting M for mom.


Exit status = 0 : job has completed successfully without any interrupt.

qdel -Wforce job_id : forcefully delete the job.


job in e state : cannot delete a job normally. we need to use -Wforce as well.



alter anything related to job. : qalter -N test 34 : change the job name of job id 34 to test


qalter -lncpus=2 36
//initially ncpus was 4 and available was 3. so it didnt ran and was in queue state.now to reflect and let the server true, set the scheulding triggeer:
TRIGGER : qmgr -c"s s scheduling=true"



 






















